<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_player_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>p_player</parentName>
  <maskName>s_player_idle</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///INIT
grav = .4;
speed_x = 0;
speed_y = 0;
jumpspeed = 10;
movespeed = 6;
img_spd = .12;
image_speed = img_spd;
image_xscale = -1;
jumpsquat = false;
grounded = true;
st_player = ps.frozen;
hp = 3;
x_init = x;
y_init = y;
invincible = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// End jump animation
jumpsquat = false;
image_speed = img_spd;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// End of dash state
st_player = ps.move;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///STATE MACHINE
sc_getinputs(1);
if (hp &lt; 1) sc_game_over(1);
switch (st_player)
{
    case ps.idle: {
        sc_move();
        sprite_index = s_player2_idle;
        image_speed = img_spd;
        if(jumpsquat || key_left || key_right) st_player = ps.move;
        if(key_attack) {
            st_player = ps.attack; 
            sprite_index = s_player2_attack;
            image_index = 0;
        }
    } break;
     case ps.move: {
        sc_move();
        image_speed = img_spd;
        if(jumpsquat){
            st_player = ps.jump; 
            sprite_index = s_player2_jump;
            break;
        }
        
        //Animation
        if(grounded &amp;&amp; abs(speed_x) &gt; movespeed-1) 
            sprite_index = s_player2_run;
        else if (grounded) sprite_index = s_player2_walk;
        
        if(abs(speed_x) &lt; .2 &amp;&amp; abs(speed_y) &lt; 1) {
            st_player = ps.idle;
        }
        if(key_attack) {
            st_player = ps.attack; 
            sprite_index = s_player2_attack;
            image_index = 0;
        }
    } break;
    case ps.jump: {
        sc_move();
        if(sprite_index == s_player2_jump) {
            image_speed = .25;
            if(image_index &gt; image_number - 1){
                sprite_index = s_player2_jump_fall;
                image_speed = img_spd;
                jumpsquat = false;
            }
        }
        if(grounded) st_player = ps.move;
        if(key_attack) { 
            st_player = ps.attack; 
            sprite_index = s_player2_jump_attack;
            image_index = 0;
        }
    } break;
    case ps.dash: {
        image_speed = 0.4;
        sprite_index = s_player2_dash;
        sc_dash();
    } break;
    case ps.attack: {
        sc_move();
        image_speed = img_spd;
        if(image_index &gt; image_number - 1){
           st_player = ps.move;
        }
        if(image_index &gt;= 1 &amp;&amp; image_index &lt;= 2){
            with(instance_create(x,y,o_hitbox)){
                with(instance_place(x,y,o_player_1)){
                    if(!invincible){
                        hp -= 1;
                        sc_player_hit();
                    }
                }
            }        
        }    
    } break;
    case ps.frozen: {
        sprite_index = s_player2_idle;
        image_speed = img_spd;
    } break;
    default: {
        show_debug_message("Default state (missing break statement)");
    }
}
 
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.899999976158142</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>36,88</point>
    <point>44,44</point>
  </PhysicsShapePoints>
</object>
