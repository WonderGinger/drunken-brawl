<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// INIT
pause = 0;
menu[0] = "Continue";
menu[1] = "Restart";
menu[2] = "Exit to menu";

padding = 64;
mpos = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Menu actions
if(!pause) exit;
var move = 0;
move -= max( keyboard_check_pressed(ord('W')), keyboard_check_pressed(vk_up), 0);
move += max( keyboard_check_pressed(ord('S')), keyboard_check_pressed(vk_down), 0);

if(move != 0){
    mpos += move;
    if(mpos &lt; 0) mpos = array_length_1d(menu) - 1;
    if(mpos &gt; array_length_1d(menu) - 1) mpos = 0;
}
var p1_push = keyboard_check_pressed(ord('C')) || keyboard_check_pressed(ord('F'))
        || keyboard_check_pressed(ord('H')) || keyboard_check_pressed(ord('B'))
        || keyboard_check_pressed(ord('G')) || keyboard_check(ord('V'));
var p2_push = keyboard_check_pressed(190) || keyboard_check_pressed(ord('L'))
        || keyboard_check_pressed(191) || keyboard_check_pressed(186) 
        || keyboard_check_pressed(ord('K')) || keyboard_check_pressed(188);
var push = max(0, p1_push, p2_push);
if(push == 1) sc_pause();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// PAUSE MENU GRAPHICS
display_set_gui_size(room_width, room_height);
if(pause){    
    // Dim background
    draw_set_color(c_black);
    draw_set_alpha(0.7);  // Opacity of dimming overlay
    draw_rectangle(0,0,room_width, room_height, 0);
    
    // Draw menu text
    draw_set_alpha(1);
    draw_set_halign(fa_center);
    draw_set_valign(fa_middle);
    draw_set_font(f_menu);
    
    for(var i = 0; i &lt; array_length_1d(menu); i+=1){
        if(i == mpos) draw_set_color(c_white);
        else draw_set_color(c_gray);
        draw_text_transformed(
            room_width/2, //X location
            room_height/2 + (i * padding), //Y location
            string(menu[i]), //Text
            0.7, 0.7, 0 //Xscale, Yscale, Rotation
        );
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="50">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// PAUSE OR UNPAUSE

if(!pause){ // Pausing
    pause = 1;
    mpos = 0;
    instance_deactivate_all(true);
}
else { //Unpausing
    pause = 0;

    instance_activate_all();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="49">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// PAUSE OR UNPAUSE

if(!pause){ // Pausing
    pause = 1;
    mpos = 0;
    instance_deactivate_all(true);
}
else { //Unpausing
    pause = 0;

    instance_activate_all();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
